name: Deploy

on:
  workflow_run:
    workflows: ["CI/CD"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'success' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.electricmap.yourdomain.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Docker image
      run: |
        docker pull ghcr.io/${{ github.repository }}:${{ github.sha }}
    
    - name: Deploy to staging
      env:
        DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment steps here
        # Example: Deploy to a staging server or cloud platform

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://electricmap.yourdomain.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Docker image
      run: |
        docker pull ghcr.io/${{ github.repository }}:${{ github.sha }}
    
    - name: Deploy to production
      env:
        DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
      run: |
        echo "Deploying to production environment"
        # Add your production deployment steps here
        # Example: Deploy to your production server or cloud platform

  notify:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: actions/github-script@v7
      with:
        script: |
          const deployJob = context.job === 'deploy-production' ? 'Production' : 'Staging';
          const status = job.status === 'success' ? '✅' : '❌';
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `${status} ${deployJob} deployment ${job.status}`
          }); 